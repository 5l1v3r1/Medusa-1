{"remainingRequest":"/Users/zhujunyi/Downloads/Medusa/node_modules/babel-loader/lib/index.js!/Users/zhujunyi/Downloads/Medusa/node_modules/eslint-loader/index.js??ref--13-0!/Users/zhujunyi/Downloads/Medusa/src/store/modules/permission.js","dependencies":[{"path":"/Users/zhujunyi/Downloads/Medusa/src/store/modules/permission.js","mtime":1584656670000},{"path":"/Users/zhujunyi/Downloads/Medusa/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhujunyi/Downloads/Medusa/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhujunyi/Downloads/Medusa/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKCIvVXNlcnMvemh1anVueWkvRG93bmxvYWRzL01lZHVzYS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5maWx0ZXJBc3luY1JvdXRlcyA9IGZpbHRlckFzeW5jUm91dGVzOwpleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7Cgp2YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi9Vc2Vycy96aHVqdW55aS9Eb3dubG9hZHMvTWVkdXNhL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0U3ByZWFkMiIpKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcyIpOwoKdmFyIF9yb3V0ZXIgPSByZXF1aXJlKCJAL3JvdXRlciIpOwoKLyoqCiAqIFVzZSBtZXRhLnJvbGUgdG8gZGV0ZXJtaW5lIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIHBlcm1pc3Npb24KICogQHBhcmFtIHJvbGVzCiAqIEBwYXJhbSByb3V0ZQogKi8KZnVuY3Rpb24gaGFzUGVybWlzc2lvbihyb2xlcywgcm91dGUpIHsKICBpZiAocm91dGUubWV0YSAmJiByb3V0ZS5tZXRhLnJvbGVzKSB7CiAgICByZXR1cm4gcm9sZXMuc29tZShmdW5jdGlvbiAocm9sZSkgewogICAgICByZXR1cm4gcm91dGUubWV0YS5yb2xlcy5pbmNsdWRlcyhyb2xlKTsKICAgIH0pOwogIH0gZWxzZSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn0KLyoqCiAqIEZpbHRlciBhc3luY2hyb25vdXMgcm91dGluZyB0YWJsZXMgYnkgcmVjdXJzaW9uCiAqIEBwYXJhbSByb3V0ZXMgYXN5bmNSb3V0ZXMKICogQHBhcmFtIHJvbGVzCiAqLwoKCmZ1bmN0aW9uIGZpbHRlckFzeW5jUm91dGVzKHJvdXRlcywgcm9sZXMpIHsKICB2YXIgcmVzID0gW107CiAgcm91dGVzLmZvckVhY2goZnVuY3Rpb24gKHJvdXRlKSB7CiAgICB2YXIgdG1wID0gKDAsIF9vYmplY3RTcHJlYWQyLmRlZmF1bHQpKHt9LCByb3V0ZSk7CgogICAgaWYgKGhhc1Blcm1pc3Npb24ocm9sZXMsIHRtcCkpIHsKICAgICAgaWYgKHRtcC5jaGlsZHJlbikgewogICAgICAgIHRtcC5jaGlsZHJlbiA9IGZpbHRlckFzeW5jUm91dGVzKHRtcC5jaGlsZHJlbiwgcm9sZXMpOwogICAgICB9CgogICAgICByZXMucHVzaCh0bXApOwogICAgfQogIH0pOwogIHJldHVybiByZXM7Cn0KCnZhciBzdGF0ZSA9IHsKICByb3V0ZXM6IFtdLAogIGFkZFJvdXRlczogW10KfTsKdmFyIG11dGF0aW9ucyA9IHsKICBTRVRfUk9VVEVTOiBmdW5jdGlvbiBTRVRfUk9VVEVTKHN0YXRlLCByb3V0ZXMpIHsKICAgIHN0YXRlLmFkZFJvdXRlcyA9IHJvdXRlczsKICAgIHN0YXRlLnJvdXRlcyA9IF9yb3V0ZXIuY29uc3RhbnRSb3V0ZXMuY29uY2F0KHJvdXRlcyk7CiAgfQp9Owp2YXIgYWN0aW9ucyA9IHsKICBnZW5lcmF0ZVJvdXRlczogZnVuY3Rpb24gZ2VuZXJhdGVSb3V0ZXMoX3JlZiwgcm9sZXMpIHsKICAgIHZhciBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICB2YXIgYWNjZXNzZWRSb3V0ZXM7CgogICAgICBpZiAocm9sZXMuaW5jbHVkZXMoJ2FkbWluJykpIHsKICAgICAgICBhY2Nlc3NlZFJvdXRlcyA9IF9yb3V0ZXIuYXN5bmNSb3V0ZXMgfHwgW107CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWNjZXNzZWRSb3V0ZXMgPSBmaWx0ZXJBc3luY1JvdXRlcyhfcm91dGVyLmFzeW5jUm91dGVzLCByb2xlcyk7CiAgICAgIH0KCiAgICAgIGNvbW1pdCgnU0VUX1JPVVRFUycsIGFjY2Vzc2VkUm91dGVzKTsKICAgICAgcmVzb2x2ZShhY2Nlc3NlZFJvdXRlcyk7CiAgICB9KTsKICB9Cn07CnZhciBfZGVmYXVsdCA9IHsKICBuYW1lc3BhY2VkOiB0cnVlLAogIHN0YXRlOiBzdGF0ZSwKICBtdXRhdGlvbnM6IG11dGF0aW9ucywKICBhY3Rpb25zOiBhY3Rpb25zCn07CmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0Ow=="},{"version":3,"sources":["/Users/zhujunyi/Downloads/Medusa/src/store/modules/permission.js"],"names":["hasPermission","roles","route","meta","some","role","includes","filterAsyncRoutes","routes","res","forEach","tmp","children","push","state","addRoutes","mutations","SET_ROUTES","constantRoutes","concat","actions","generateRoutes","commit","Promise","resolve","accessedRoutes","asyncRoutes","namespaced"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;;AAKA,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;AACnC,MAAIA,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWF,KAA7B,EAAoC;AAClC,WAAOA,KAAK,CAACG,IAAN,CAAW,UAAAC,IAAI;AAAA,aAAIH,KAAK,CAACC,IAAN,CAAWF,KAAX,CAAiBK,QAAjB,CAA0BD,IAA1B,CAAJ;AAAA,KAAf,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF;AAED;;;;;;;AAKO,SAASE,iBAAT,CAA2BC,MAA3B,EAAmCP,KAAnC,EAA0C;AAC/C,MAAMQ,GAAG,GAAG,EAAZ;AAEAD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAAAR,KAAK,EAAI;AACtB,QAAMS,GAAG,mCAAQT,KAAR,CAAT;;AACA,QAAIF,aAAa,CAACC,KAAD,EAAQU,GAAR,CAAjB,EAA+B;AAC7B,UAAIA,GAAG,CAACC,QAAR,EAAkB;AAChBD,QAAAA,GAAG,CAACC,QAAJ,GAAeL,iBAAiB,CAACI,GAAG,CAACC,QAAL,EAAeX,KAAf,CAAhC;AACD;;AACDQ,MAAAA,GAAG,CAACI,IAAJ,CAASF,GAAT;AACD;AACF,GARD;AAUA,SAAOF,GAAP;AACD;;AAED,IAAMK,KAAK,GAAG;AACZN,EAAAA,MAAM,EAAE,EADI;AAEZO,EAAAA,SAAS,EAAE;AAFC,CAAd;AAKA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,UAAU,EAAE,oBAACH,KAAD,EAAQN,MAAR,EAAmB;AAC7BM,IAAAA,KAAK,CAACC,SAAN,GAAkBP,MAAlB;AACAM,IAAAA,KAAK,CAACN,MAAN,GAAeU,uBAAeC,MAAf,CAAsBX,MAAtB,CAAf;AACD;AAJe,CAAlB;AAOA,IAAMY,OAAO,GAAG;AACdC,EAAAA,cADc,gCACapB,KADb,EACoB;AAAA,QAAjBqB,MAAiB,QAAjBA,MAAiB;AAChC,WAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5B,UAAIC,cAAJ;;AACA,UAAIxB,KAAK,CAACK,QAAN,CAAe,OAAf,CAAJ,EAA6B;AAC3BmB,QAAAA,cAAc,GAAGC,uBAAe,EAAhC;AACD,OAFD,MAEO;AACLD,QAAAA,cAAc,GAAGlB,iBAAiB,CAACmB,mBAAD,EAAczB,KAAd,CAAlC;AACD;;AACDqB,MAAAA,MAAM,CAAC,YAAD,EAAeG,cAAf,CAAN;AACAD,MAAAA,OAAO,CAACC,cAAD,CAAP;AACD,KATM,CAAP;AAUD;AAZa,CAAhB;eAee;AACbE,EAAAA,UAAU,EAAE,IADC;AAEbb,EAAAA,KAAK,EAALA,KAFa;AAGbE,EAAAA,SAAS,EAATA,SAHa;AAIbI,EAAAA,OAAO,EAAPA;AAJa,C","sourcesContent":["import { asyncRoutes, constantRoutes } from '@/router'\n\n/**\n * Use meta.role to determine if the current user has permission\n * @param roles\n * @param route\n */\nfunction hasPermission(roles, route) {\n  if (route.meta && route.meta.roles) {\n    return roles.some(role => route.meta.roles.includes(role))\n  } else {\n    return true\n  }\n}\n\n/**\n * Filter asynchronous routing tables by recursion\n * @param routes asyncRoutes\n * @param roles\n */\nexport function filterAsyncRoutes(routes, roles) {\n  const res = []\n\n  routes.forEach(route => {\n    const tmp = { ...route }\n    if (hasPermission(roles, tmp)) {\n      if (tmp.children) {\n        tmp.children = filterAsyncRoutes(tmp.children, roles)\n      }\n      res.push(tmp)\n    }\n  })\n\n  return res\n}\n\nconst state = {\n  routes: [],\n  addRoutes: []\n}\n\nconst mutations = {\n  SET_ROUTES: (state, routes) => {\n    state.addRoutes = routes\n    state.routes = constantRoutes.concat(routes)\n  }\n}\n\nconst actions = {\n  generateRoutes({ commit }, roles) {\n    return new Promise(resolve => {\n      let accessedRoutes\n      if (roles.includes('admin')) {\n        accessedRoutes = asyncRoutes || []\n      } else {\n        accessedRoutes = filterAsyncRoutes(asyncRoutes, roles)\n      }\n      commit('SET_ROUTES', accessedRoutes)\n      resolve(accessedRoutes)\n    })\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions\n}\n"]}]}